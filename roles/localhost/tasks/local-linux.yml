# ansible-task
- name: Ensure ~/code directory exists
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/code"
    state: directory
    mode: '0755'

- name: Configure git user name
  community.general.git_config:
    name: user.name
    value: "David Snider"
    scope: global

- name: Configure git user email
  community.general.git_config:
    name: user.email
    value: "david@davidsnider.org"
    scope: global

- name: Configure git to use ssh.exe for SSH connections
  community.general.git_config:
    name: core.sshCommand
    value: "ssh.exe"
    scope: global

- name: Configure git signing key
  community.general.git_config:
    name: user.signingkey
    value: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKWm36FodEyxXOXxqhkCj0YLDHkori4Dzmq3hI0PsrX9"
    scope: global

- name: Configure GPG format
  community.general.git_config:
    name: gpg.format
    value: "ssh"
    scope: global

- name: Configure GPG SSH program
  community.general.git_config:
    name: gpg.ssh.program
    value: "/mnt/c/Users/david/AppData/Local/1Password/app/8/op-ssh-sign-wsl"
    scope: global

- name: Enable commit GPG signing
  community.general.git_config:
    name: commit.gpgsign
    value: "true"
    scope: global

- name: Ensure .ssh directory exists
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/.ssh"
    state: directory
    mode: '0700'

- name: Create SSH allowed signers file
  ansible.builtin.copy:
    content: "david@davidsnider.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKWm36FodEyxXOXxqhkCj0YLDHkori4Dzmq3hI0PsrX9"
    dest: "{{ lookup('env', 'HOME') }}/.ssh/allowed_signers"
    mode: '0644'

- name: Configure Git allowed signers file
  community.general.git_config:
    name: gpg.ssh.allowedSignersFile
    value: "{{ lookup('env', 'HOME') }}/.ssh/allowed_signers"
    scope: global

# Enhanced Git Security Configuration
- name: Require all commits to be signed
  community.general.git_config:
    name: commit.gpgsign
    value: "true"
    scope: global

- name: Require all tags to be signed
  community.general.git_config:
    name: tag.gpgsign
    value: "true"
    scope: global

- name: Enable strict SSL verification
  community.general.git_config:
    name: http.sslverify
    value: "true"
    scope: global

- name: Enable push signature verification
  community.general.git_config:
    name: receive.fsckobjects
    value: "true"
    scope: global

- name: Enable transfer signature verification
  community.general.git_config:
    name: transfer.fsckobjects
    value: "true"
    scope: global

- name: Enable fetch signature verification
  community.general.git_config:
    name: fetch.fsckobjects
    value: "true"
    scope: global

- name: Set minimum TLS version for HTTPS
  community.general.git_config:
    name: http.sslversion
    value: "tlsv1.2"
    scope: global

- name: Configure SSH key validation
  community.general.git_config:
    name: gpg.ssh.defaultKeyCommand
    value: "ssh-add -L"
    scope: global

# SSH Key Management and Validation
- name: Validate SSH directory permissions
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/.ssh"
    state: directory
    mode: '0700'
    owner: "{{ lookup('env', 'USER') }}"

- name: Validate allowed_signers file permissions
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/.ssh/allowed_signers"
    mode: '0644'
    owner: "{{ lookup('env', 'USER') }}"

- name: Create SSH config for enhanced security
  ansible.builtin.copy:
    dest: "{{ lookup('env', 'HOME') }}/.ssh/config"
    mode: '0600'
    content: |
      # Enhanced SSH Security Configuration
      Host *
        # Use only the configured keys
        IdentitiesOnly yes

        # Disable agent forwarding for security
        ForwardAgent no

        # Disable X11 forwarding for security
        ForwardX11 no

        # Use strong ciphers only
        Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr

        # Use strong MACs only
        MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512

        # Use strong key exchange algorithms only
        KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512

        # Use strong host key algorithms only
        HostKeyAlgorithms ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256

        # Verify host keys strictly
        StrictHostKeyChecking ask

        # Connection timeout and keep-alive settings
        ConnectTimeout 30
        ServerAliveInterval 60
        ServerAliveCountMax 3

- name: Create GPG key rotation script
  ansible.builtin.copy:
    dest: "{{ lookup('env', 'HOME') }}/.local/bin/rotate-git-keys"
    mode: '0755'
    content: |
      #!/bin/bash
      # Git SSH Key Rotation Script
      # This script helps rotate SSH keys used for Git signing

      set -euo pipefail

      SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
      SSH_DIR="$HOME/.ssh"
      ALLOWED_SIGNERS="$SSH_DIR/allowed_signers"
      BACKUP_DIR="$SSH_DIR/backups/$(date +%Y%m%d_%H%M%S)"

      echo "üîê Git SSH Key Rotation Script"
      echo "=============================="

      # Create backup directory
      mkdir -p "$BACKUP_DIR"

      # Backup current allowed_signers
      if [[ -f "$ALLOWED_SIGNERS" ]]; then
          cp "$ALLOWED_SIGNERS" "$BACKUP_DIR/allowed_signers.backup"
          echo "‚úÖ Backed up current allowed_signers to $BACKUP_DIR"
      fi

      echo ""
      echo "Current signing keys in allowed_signers:"
      if [[ -f "$ALLOWED_SIGNERS" ]]; then
          cat "$ALLOWED_SIGNERS" | nl
      else
          echo "No allowed_signers file found"
      fi

      echo ""
      echo "Available SSH keys in agent:"
      if command -v ssh-add >/dev/null 2>&1; then
          ssh-add -L 2>/dev/null || echo "No keys in SSH agent"
      else
          echo "ssh-add not available"
      fi

      echo ""
      echo "To add a new key to allowed_signers:"
      echo "1. Ensure your new key is loaded in 1Password SSH agent"
      echo "2. Run: echo 'david@davidsnider.org <new-key-type> <new-public-key>' >> ~/.ssh/allowed_signers"
      echo "3. Update Git configuration: git config --global user.signingkey '<new-public-key>'"
      echo ""
      echo "‚ö†Ô∏è  Remember to update the Ansible configuration in roles/localhost/tasks/local-linux.yml"
      echo "    with the new signing key for consistent deployment."

      echo ""
      echo "üîç Verifying current Git configuration..."
      echo "Current signing key: $(git config --global user.signingkey || echo 'Not set')"
      echo "GPG format: $(git config --global gpg.format || echo 'Not set')"
      echo "Commit signing enabled: $(git config --global commit.gpgsign || echo 'Not set')"

- name: Install a package and update cache if needed
  become: true
  ansible.builtin.apt:
    name:
      - gh
      - htop
      - jq
      - python3-poetry
      - pre-commit
      - zsh
      # - zsh-autocomplete
      - zsh-autosuggestions
      - zsh-syntax-highlighting
      - unzip
    state: present
    update_cache: true
    cache_valid_time: 86400 # in seconds, equals 24 hours

- name: Get current user
  ansible.builtin.command: whoami
  register: current_user
  changed_when: false

- name: Set zsh as default shell
  ansible.builtin.user:
    name: "{{ current_user.stdout }}"
    shell: /usr/bin/zsh
  become: true

- name: Ensure ~/.local/bin directory exists
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/.local/bin"
    state: directory
    mode: '0755'

- name: Install oh-my-posh if not present
  ansible.builtin.shell:
    cmd: curl -s https://ohmyposh.dev/install.sh | bash -s
  environment:
    OMP_INSTALL_DIR: "{{ lookup('env', 'HOME') }}/.local/bin"
  args:
    creates: "{{ lookup('env', 'HOME') }}/.local/bin/oh-my-posh"

- name: Check if Oh My Zsh is installed
  ansible.builtin.stat:
    path: "{{ lookup('env', 'HOME') }}/.oh-my-zsh"
  register: oh_my_zsh_stat

- name: Remove .zprofile if it exists
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/.zprofile"
    state: absent

- name: Install Oh My Zsh if not present
  ansible.builtin.shell: |
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  args:
    creates: "{{ lookup('env', 'HOME') }}/.oh-my-zsh"
  when: not oh_my_zsh_stat.stat.exists
  changed_when: false

- name: Copy zshrc file
  ansible.builtin.copy:
    src: zshrc-linux
    dest: "{{ lookup('env', 'HOME') }}/.zshrc"
    mode: '0644'

- name: Copy zprofile file
  ansible.builtin.copy:
    src: zprofile-linux
    dest: "{{ lookup('env', 'HOME') }}/.zprofile"
    mode: '0644'

- name: Install Pulumi CLI
  block:
    - name: Check if Pulumi is already installed
      ansible.builtin.command: which pulumi
      register: pulumi_check
      failed_when: false
      changed_when: false

    - name: Download and install Pulumi CLI
      ansible.builtin.shell: |
        curl -fsSL https://get.pulumi.com | sh
      when: pulumi_check.rc != 0
      changed_when: true


- name: Download and install 1Password CLI
  block:
    - name: Download 1Password GPG key
      ansible.builtin.get_url:
        url: https://downloads.1password.com/linux/keys/1password.asc
        dest: /tmp/1password.asc
        mode: '0644'

    - name: Create 1Password keyring directory
      ansible.builtin.file:
        path: /usr/share/keyrings
        state: directory
        mode: '0755'
      become: true

    - name: Import 1Password GPG key to system keyring
      ansible.builtin.shell: |
        gpg --dearmor < /tmp/1password.asc > /usr/share/keyrings/1password-archive-keyring.gpg
      become: true

    - name: Get system architecture
      ansible.builtin.command: dpkg --print-architecture
      register: system_arch
      changed_when: false

    - name: Add 1Password repository
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ system_arch.stdout }} signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/{{ system_arch.stdout }} stable main"
        filename: 1password
        state: present
      become: true

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
      become: true

    - name: Install 1Password CLI
      ansible.builtin.apt:
        name: 1password-cli
        state: present
      become: true

  always:
    - name: Clean up temporary files
      ansible.builtin.file:
        path: /tmp/1password.asc
        state: absent
