# ansible-task
- name: Ensure ~/code directory exists
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/code"
    state: directory
    mode: '0755'

- name: Install Homebrew if not present
  ansible.builtin.shell: |
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  args:
    creates: /opt/homebrew/bin/brew
  become: false
  changed_when: false

- name: Check last Homebrew update time
  ansible.builtin.stat:
    path: /opt/homebrew/.git/FETCH_HEAD
  register: brew_update_stat

- name: Set update_brew variable if last update was more than 24 hours ago
  ansible.builtin.set_fact:
    update_brew: >-
      {{ (brew_update_stat.stat.exists and ((ansible_date_time.epoch | int) - (brew_update_stat.stat.mtime | int) > 86400))
         or (not brew_update_stat.stat.exists) }}

- name: Update Homebrew and install packages
  community.general.homebrew:
    name:
      - gh
      - htop
      - oh-my-posh
      - poetry
      - pre-commit
      - zsh-history-substring-search
    state: present
    update_homebrew: "{{ update_brew }}"

- name: Install Homebrew casks
  community.general.homebrew_cask:
    name:
      - 1password
      - 1password-cli
      - iterm2
      - visual-studio-code
    state: present

- name: Ensure .gitignore exists in home directory
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/.gitignore"
    state: touch
    mode: '0600'
  changed_when: false # This task only ensures the file exists

- name: Add .dotfiles to .gitignore
  ansible.builtin.lineinfile:
    path: "{{ lookup('env', 'HOME') }}/.gitignore"
    line: ".dotfiles"
  register: gitignore_status

- name: Clone the dotfiles repository
  ansible.builtin.git:
    repo: https://github.com/davidasnider/dotfiles.git
    dest: "{{ lookup('env', 'HOME') }}/.dotfiles"
    version: main # Or specify a branch/tag if needed
    force: true
  register: clone_status
  notify: Ignore untracked files for dotfiles

- name: Check if Oh My Zsh is installed
  ansible.builtin.stat:
    path: "{{ lookup('env', 'HOME') }}/.oh-my-zsh"
  register: oh_my_zsh_stat

- name: Remove .zprofile if it exists
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/.zprofile"
    state: absent

- name: Install Oh My Zsh if not present
  ansible.builtin.shell: |
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  args:
    creates: "{{ lookup('env', 'HOME') }}/.oh-my-zsh"
  when: not oh_my_zsh_stat.stat.exists
  changed_when: false

- name: Configure Oh My Zsh in .zshrc
  ansible.builtin.blockinfile:
    path: "{{ lookup('env', 'HOME') }}/.zshrc"
    create: true
    mode: '0600'
    marker: "# {mark} ANSIBLE MANAGED OH MY ZSH CONFIGURATION"
    block: |
      # Python auto env setup
      PYTHON_VENV_NAME=".venv"
      PYTHON_AUTO_VRUN=true
      PYTHON_VENV_NAMES=($PYTHON_VENV_NAME venv)

      # Path to your Oh My Zsh installation
      export ZSH="$HOME/.oh-my-zsh"

      # Theme and plugins configuration
      ZSH_THEME=""
      plugins=(git gh macos pip poetry python)

      # Source Oh My Zsh
      source $ZSH/oh-my-zsh.sh

      # Additional plugin configuration
      source $(brew --prefix)/share/zsh-history-substring-search/zsh-history-substring-search.zsh
