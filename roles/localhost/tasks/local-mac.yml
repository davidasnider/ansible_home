---
# ansible-task
- name: Ensure ~/code directory exists
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/code"
    state: directory
    mode: "0755"

- name: Configure git user name
  community.general.git_config:
    name: user.name
    value: David Snider
    scope: global

- name: Configure git user email
  community.general.git_config:
    name: user.email
    value: david@davidsnider.org
    scope: global

- name: Configure git signing key
  community.general.git_config:
    name: user.signingkey
    value: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKWm36FodEyxXOXxqhkCj0YLDHkori4Dzmq3hI0PsrX9
    scope: global

- name: Configure GPG format
  community.general.git_config:
    name: gpg.format
    value: ssh
    scope: global

- name: Configure GPG SSH program
  community.general.git_config:
    name: gpg.ssh.program
    value: /Applications/1Password.app/Contents/MacOS/op-ssh-sign
    scope: global

- name: Enable commit GPG signing
  community.general.git_config:
    name: commit.gpgsign
    value: "true"
    scope: global

- name: Ensure .ssh directory exists
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/.ssh"
    state: directory
    mode: "0700"

- name: Create SSH config file with 1Password agent
  ansible.builtin.copy:
    content: |
      Host *
        IdentityAgent "~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"
    dest: "{{ lookup('env', 'HOME') }}/.ssh/config"
    mode: "0600"

- name: Create SSH allowed signers file
  ansible.builtin.copy:
    content: david@davidsnider.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKWm36FodEyxXOXxqhkCj0YLDHkori4Dzmq3hI0PsrX9
    dest: "{{ lookup('env', 'HOME') }}/.ssh/allowed_signers"
    mode: "0644"

- name: Configure Git allowed signers file
  community.general.git_config:
    name: gpg.ssh.allowedSignersFile
    value: "{{ lookup('env', 'HOME') }}/.ssh/allowed_signers"
    scope: global

# Enhanced Git Security Configuration
- name: Require all commits to be signed
  community.general.git_config:
    name: commit.gpgsign
    value: "true"
    scope: global

- name: Require all tags to be signed
  community.general.git_config:
    name: tag.gpgsign
    value: "true"
    scope: global

- name: Enable strict SSL verification
  community.general.git_config:
    name: http.sslverify
    value: "true"
    scope: global

- name: Enable push signature verification
  community.general.git_config:
    name: receive.fsckobjects
    value: "true"
    scope: global

- name: Enable transfer signature verification
  community.general.git_config:
    name: transfer.fsckobjects
    value: "true"
    scope: global

- name: Enable fetch signature verification
  community.general.git_config:
    name: fetch.fsckobjects
    value: "true"
    scope: global

- name: Set minimum TLS version for HTTPS
  community.general.git_config:
    name: http.sslversion
    value: tlsv1.2
    scope: global

- name: Configure SSH key validation
  community.general.git_config:
    name: gpg.ssh.defaultKeyCommand
    value: ssh-add -L
    scope: global

# SSH Key Management and Validation
- name: Validate SSH directory permissions
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/.ssh"
    state: directory
    mode: "0700"
    owner: "{{ lookup('env', 'USER') }}"

- name: Validate allowed_signers file permissions
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/.ssh/allowed_signers"
    mode: "0644"
    owner: "{{ lookup('env', 'USER') }}"

- name: Install Homebrew if not present
  ansible.builtin.shell: |
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  args:
    creates: /opt/homebrew/bin/brew
  become: false
  changed_when: false

- name: Check last Homebrew update time
  ansible.builtin.stat:
    path: /opt/homebrew/.git/FETCH_HEAD
  register: localhost_brew_update_stat

- name: Set update_brew variable if last update was more than 24 hours ago
  ansible.builtin.set_fact:
    localhost_update_brew: >-
      {{ (localhost_brew_update_stat.stat.exists and ((ansible_date_time.epoch | int) - (localhost_brew_update_stat.stat.mtime | int) > 86400))
         or (not localhost_brew_update_stat.stat.exists) }}

- name: Update Homebrew and install packages
  community.general.homebrew:
    name:
      - gh
      - htop
      - oh-my-posh
      - poetry
      - pre-commit
      - pulumi
      - zsh-autocomplete
      - zsh-autosuggestions
      - zsh-fast-syntax-highlighting
      - zsh-history-substring-search
    state: present
    update_homebrew: "{{ localhost_update_brew }}"

- name: Install Homebrew casks with security verification
  block:
    - name: Install 1Password and 1Password CLI with security verification
      community.general.homebrew_cask:
        name:
          - 1password
          - 1password-cli
        state: present

    - name: Verify 1Password CLI installation and security
      ansible.builtin.command: |
        /opt/homebrew/bin/op --version
      register: localhost_op_version_check
      changed_when: false
      failed_when: localhost_op_version_check.rc != 0

    - name: Validate 1Password CLI version meets security requirements
      ansible.builtin.fail:
        msg: "1Password CLI version {{ localhost_op_version_check.stdout }} does not meet minimum security requirements (2.0.0+)"
      when:
        - localhost_op_version_check.stdout is defined
        - (localhost_op_version_check.stdout | regex_search('([0-9]+)\\.([0-9]+)\\.([0-9]+)') | split('.') | first | int) < 2

    - name: Install other Homebrew casks
      community.general.homebrew_cask:
        name:
          - iterm2
          - visual-studio-code
          - orbstack
        state: present

- name: Ensure .gitignore exists in home directory
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/.gitignore"
    state: touch
    mode: "0600"
  changed_when: false # This task only ensures the file exists

- name: Add .dotfiles to .gitignore
  ansible.builtin.lineinfile:
    path: "{{ lookup('env', 'HOME') }}/.gitignore"
    line: .dotfiles
  register: localhost_gitignore_status

- name: Ensure ~/.local/bin directory exists
  ansible.builtin.file:
    path: "{{ lookup('env', 'HOME') }}/.local/bin"
    state: directory
    mode: "0755"

- name: Create GPG key rotation script
  ansible.builtin.copy:
    dest: "{{ lookup('env', 'HOME') }}/.local/bin/rotate-git-keys"
    mode: "0755"
    content: |
      #!/bin/bash
      # Git SSH Key Rotation Script
      # This script helps rotate SSH keys used for Git signing

      set -euo pipefail

      SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
      SSH_DIR="$HOME/.ssh"
      ALLOWED_SIGNERS="$SSH_DIR/allowed_signers"
      BACKUP_DIR="$SSH_DIR/backups/$(date +%Y%m%d_%H%M%S)"

      echo "🔐 Git SSH Key Rotation Script"
      echo "=============================="

      # Create backup directory
      mkdir -p "$BACKUP_DIR"

      # Backup current allowed_signers
      if [[ -f "$ALLOWED_SIGNERS" ]]; then
          cp "$ALLOWED_SIGNERS" "$BACKUP_DIR/allowed_signers.backup"
          echo "✅ Backed up current allowed_signers to $BACKUP_DIR"
      fi

      echo ""
      echo "Current signing keys in allowed_signers:"
      if [[ -f "$ALLOWED_SIGNERS" ]]; then
          cat "$ALLOWED_SIGNERS" | nl
      else
          echo "No allowed_signers file found"
      fi

      echo ""
      echo "Available SSH keys in agent:"
      if command -v ssh-add >/dev/null 2>&1; then
          ssh-add -L 2>/dev/null || echo "No keys in SSH agent"
      else
          echo "ssh-add not available"
      fi

      echo ""
      echo "To add a new key to allowed_signers:"
      echo "1. Ensure your new key is loaded in 1Password SSH agent"
      echo "2. Run: echo 'david@davidsnider.org <new-key-type> <new-public-key>' >> ~/.ssh/allowed_signers"
      echo "3. Update Git configuration: git config --global user.signingkey '<new-public-key>'"
      echo ""
      echo "⚠️  Remember to update the Ansible configuration in roles/localhost/tasks/local-mac.yml"
      echo "    with the new signing key for consistent deployment."

      echo ""
      echo "🔍 Verifying current Git configuration..."
      echo "Current signing key: $(git config --global user.signingkey || echo 'Not set')"
      echo "GPG format: $(git config --global gpg.format || echo 'Not set')"
      echo "Commit signing enabled: $(git config --global commit.gpgsign || echo 'Not set')"

- name: Check if Oh My Zsh is installed
  ansible.builtin.stat:
    path: "{{ lookup('env', 'HOME') }}/.oh-my-zsh"
  register: localhost_oh_my_zsh_stat


- name: Install Oh My Zsh if not present
  ansible.builtin.shell: |
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  args:
    creates: "{{ lookup('env', 'HOME') }}/.oh-my-zsh"
  when: not localhost_oh_my_zsh_stat.stat.exists
  changed_when: false

- name: Copy zshrc file
  ansible.builtin.copy:
    src: zshrc-mac
    dest: "{{ lookup('env', 'HOME') }}/.zshrc"
    mode: "0644"

- name: Copy zprofile file
  ansible.builtin.copy:
    src: zprofile-mac
    dest: "{{ lookup('env', 'HOME') }}/.zprofile"
    mode: "0644"

# 1Password CLI Security Enhancements
- name: Include 1Password security enhancements
  ansible.builtin.include_tasks: 1password-security.yml

- name: Run 1Password CLI health check
  ansible.builtin.command: "{{ lookup('env', 'HOME') }}/.local/bin/op-health-check"
  register: localhost_op_health_check
  changed_when: false
  failed_when: localhost_op_health_check.rc > 1  # Allow warnings (rc=1) but fail on errors (rc=2)
